// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5PkZx9c7sM1bvoSfz3hwLh
// Component: -qTr1ahajh
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { DataFetcher } from "@plasmicpkgs/plasmic-query"; // plasmic-import: ae7V86eNoXA/codeComponent
import Button2 from "../../Button2"; // plasmic-import: Y2T8I2DKDKS/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_plasmic.module.css"; // plasmic-import: 5PkZx9c7sM1bvoSfz3hwLh/projectcss
import sty from "./PlasmicDetails.module.css"; // plasmic-import: -qTr1ahajh/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: iPdQ3T0J00s/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: 3v2twyVVRSu/icon

export type PlasmicDetails__VariantMembers = {};
export type PlasmicDetails__VariantsArgs = {};
type VariantPropType = keyof PlasmicDetails__VariantsArgs;
export const PlasmicDetails__VariantProps = new Array<VariantPropType>();

export type PlasmicDetails__ArgsType = {
  imageUrl?: React.ComponentProps<typeof p.PlasmicImg>["src"];
};
type ArgPropType = keyof PlasmicDetails__ArgsType;
export const PlasmicDetails__ArgProps = new Array<ArgPropType>("imageUrl");

export type PlasmicDetails__OverridesType = {
  container?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  httpApiFetcher?: p.Flex<typeof DataFetcher>;
  back?: p.Flex<typeof Button2>;
  img?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultDetailsProps {
  imageUrl?: React.ComponentProps<typeof p.PlasmicImg>["src"];
  className?: string;
}

function PlasmicDetails__RenderFunc(props: {
  variants: PlasmicDetails__VariantsArgs;
  args: PlasmicDetails__ArgsType;
  overrides: PlasmicDetails__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          imageUrl: undefined
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"container"}
          data-plasmic-override={overrides.container}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.container
          )}
        >
          {true ? (
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                {"More Details"}
              </h1>
            </div>
          ) : null}

          <DataFetcher
            data-plasmic-name={"httpApiFetcher"}
            data-plasmic-override={overrides.httpApiFetcher}
            className={classNames("__wab_instance", sty.httpApiFetcher)}
            dataName={"fetchedData" as const}
            errorDisplay={
              <ph.DataCtxReader>
                {$ctx => "Error fetching data"}
              </ph.DataCtxReader>
            }
            headers={{
              "Content-Type": "application/json",
              Accept: "application/json"
            }}
            loadingDisplay={
              <ph.DataCtxReader>{$ctx => "Loading..."}</ph.DataCtxReader>
            }
            method={"GET" as const}
            noLayout={false}
            previewErrorDisplay={false}
            previewSpinner={false}
            url={"https://dummyjson.com/products/1" as const}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <React.Fragment>
                  <Button2
                    data-plasmic-name={"back"}
                    data-plasmic-override={overrides.back}
                    className={classNames("__wab_instance", sty.back)}
                    color={"softGreen" as const}
                    link={`/`}
                  >
                    {"BACK"}
                  </Button2>

                  <p.PlasmicImg
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"100%" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={(() => {
                      try {
                        return $ctx.fetchedData.thumbnail;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </React.Fragment>
              )}
            </ph.DataCtxReader>
          </DataFetcher>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  container: ["container", "freeBox", "h1", "httpApiFetcher", "back", "img"],
  freeBox: ["freeBox", "h1"],
  h1: ["h1"],
  httpApiFetcher: ["httpApiFetcher", "back", "img"],
  back: ["back"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  container: "div";
  freeBox: "div";
  h1: "h1";
  httpApiFetcher: typeof DataFetcher;
  back: typeof Button2;
  img: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDetails__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDetails__VariantsArgs;
    args?: PlasmicDetails__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDetails__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDetails__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicDetails__ArgProps,
          internalVariantPropNames: PlasmicDetails__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicDetails__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "container") {
    func.displayName = "PlasmicDetails";
  } else {
    func.displayName = `PlasmicDetails.${nodeName}`;
  }
  return func;
}

export const PlasmicDetails = Object.assign(
  // Top-level PlasmicDetails renders the root element
  makeNodeComponent("container"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    h1: makeNodeComponent("h1"),
    httpApiFetcher: makeNodeComponent("httpApiFetcher"),
    back: makeNodeComponent("back"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicDetails
    internalVariantProps: PlasmicDetails__VariantProps,
    internalArgProps: PlasmicDetails__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Product Details",
      description: "Page to display details of a particular product",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDetails;
/* prettier-ignore-end */
